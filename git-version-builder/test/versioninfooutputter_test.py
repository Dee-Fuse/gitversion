import unittest

from gitversionbuilder import versioninfo
from gitversionbuilder import versioninfooutputter
import test_utils

class VersionInfoOutputterTest(unittest.TestCase, test_utils.CodeAsserts):
    def test_output_cpp(self):
        expected = """
                // ---------------------------------------------------
                // This file is autogenerated by git-version.
                // DO NOT MODIFY!
                // ---------------------------------------------------

                #pragma once
                #ifndef __GITVERSIONBUILDER__VERSION_H__
                #define __GITVERSIONBUILDER__VERSION_H__

                namespace version {
                    constexpr const char *VERSION_STRING = "v1.6-dev2-230a";
                    constexpr const char *GIT_TAG_NAME = "v1.6";
                    constexpr const unsigned int GIT_COMMITS_SINCE_TAG = 2;
                    constexpr const char *GIT_COMMIT_ID = "230a";
                }

                #endif
            """
        actual = versioninfooutputter.to_cpp(versioninfo.VersionInfo("v1.6", 2, "230a", True))
        self.assertCodeEqual(expected, actual)

    def test_output_python(self):
        expected = """
                # ---------------------------------------------------
                # This file is autogenerated by git-version.
                # DO NOT MODIFY!
                # ---------------------------------------------------

                VERSION_STRING = "v1.6-dev2-230a"
                GIT_TAG_NAME = "v1.6"
                GIT_COMMITS_SINCE_TAG = 2
                GIT_COMMIT_ID = "230a"
            """
        actual = versioninfooutputter.to_python(versioninfo.VersionInfo("v1.6", 2, "230a", True))
        self.assertCodeEqual(expected, actual)


if __name__ == '__main__':
    unittest.main()
